@startuml
abstract class CellViewModel {
    - _x : double
    - _y : double
    - _isHighlighted : bool
    - _isSelected : bool
    + CellViewModel(model:CellModel, sheet:SheetViewModel)
    + <<virtual>> BackgroundColorHex : string <<get>> <<set>>
    + <<virtual>> BorderColorHex : string <<get>> <<set>>
    + BorderThicknessBottom : string <<get>> <<set>>
    + BorderThicknessLeft : string <<get>> <<set>>
    + BorderThicknessRight : string <<get>> <<set>>
    + <<virtual>> BorderThicknessString : string <<get>> <<set>>
    + BorderThicknessTop : string <<get>> <<set>>
    + <<virtual>> Column : int <<get>> <<set>>
    + <<virtual>> ContentBackgroundColorHex : string <<get>> <<set>>
    + <<virtual>> ContentBorderColorHex : string <<get>> <<set>>
    + ContentBorderThicknessBottom : string <<get>> <<set>>
    + ContentBorderThicknessLeft : string <<get>> <<set>>
    + ContentBorderThicknessRight : string <<get>> <<set>>
    + <<virtual>> ContentBorderThicknessString : string <<get>> <<set>>
    + ContentBorderThicknessTop : string <<get>> <<set>>
    + <<virtual>> ContentHighlightColorHex : string <<get>> <<set>>
    + <<virtual>> FontFamily : string <<get>> <<set>>
    + <<virtual>> FontSize : double <<get>> <<set>>
    + <<virtual>> ForegroundColorHex : string <<get>> <<set>>
    + <<virtual>> Height : double <<get>> <<set>>
    + <<virtual>> ID : string <<get>>
    + <<virtual>> Index : int <<get>> <<set>>
    + <<virtual>> IsFontBold : bool <<get>> <<set>>
    + <<virtual>> IsFontItalic : bool <<get>> <<set>>
    + <<virtual>> IsFontStrikethrough : bool <<get>> <<set>>
    + <<virtual>> IsHighlighted : bool <<get>> <<set>>
    + <<virtual>> IsSelected : bool <<get>> <<set>>
    + MarginBottom : string <<get>> <<set>>
    + MarginLeft : string <<get>> <<set>>
    + MarginRight : string <<get>> <<set>>
    + <<virtual>> MarginString : string <<get>> <<set>>
    + MarginTop : string <<get>> <<set>>
    + <<virtual>> PopulateFunctionName : string <<get>> <<set>>
    + <<virtual>> Row : int <<get>> <<set>>
    + <<virtual>> ShouldShowSelectionBorder : bool <<get>>
    + <<virtual>> ShouldShowSelectionFill : bool <<get>>
    + <<virtual>> Text : string <<get>> <<set>>
    + <<virtual>> TriggerFunctionName : string <<get>> <<set>>
    + <<virtual>> Width : double <<get>> <<set>>
    + <<virtual>> X : double <<get>> <<set>>
    + <<virtual>> Y : double <<get>> <<set>>
    + HighlightCell(color:string) : void
    + NotifyBorderThicknessChanged() : void
    + NotifyContentBorderThicknessChanged() : void
    + NotifyMarginChanged() : void
    + PopulateText() : void
    + UnhighlightCell() : void
    + UpdateBorderThickness(stringBorderThickness:string) : bool
    + UpdateContentBorderThickness(stringContentBorderThickness:string) : bool
    + UpdateMargin(stringMargin:string) : bool
    <<internal>> GetName() : string
    - ModelPropertyChanged(sender:object?, e:System.ComponentModel.PropertyChangedEventArgs) : void
}
class "IEnumerable`1"<T> {
}
class "List`1"<T> {
}
PropertyChangedBase <|-- CellViewModel
CellViewModel --> "_model" CellModel
CellViewModel --> "_sheetViewModel" SheetViewModel
CellViewModel o-> "_selectionBorderColor" SolidColorBrush
CellViewModel o-> "_selectionColor" SolidColorBrush
CellViewModel --> "BackgroundColor" Brush
CellViewModel --> "BorderColor" SolidColorBrush
CellViewModel --> "BorderThickness" Thickness
CellViewModel --> "CellType" CellType
CellViewModel --> "ContentBackgroundColor" SolidColorBrush
CellViewModel --> "ContentBorderColor" SolidColorBrush
CellViewModel --> "ContentBorderThickness" Thickness
CellViewModel --> "ContentHighlightColor" SolidColorBrush
CellViewModel --> "FontStyleForView" FontStyle
CellViewModel --> "FontWeightForView" FontWeight
CellViewModel --> "ForegroundColor" SolidColorBrush
CellViewModel --> "HorizontalAlignmentForView" HorizontalAlignment
CellViewModel --> "HorizontalAlignmentForViewCenter" HorizontalAlignment
CellViewModel --> "Margin" Thickness
CellViewModel --> "Model" CellModel
CellViewModel --> "PrettyCellLocationDependencyNames<string>" "IEnumerable`1"
CellViewModel --> "PrettyDependencyNames<string>" "List`1"
CellViewModel --> "SelectionBorderColor" SolidColorBrush
CellViewModel --> "SelectionColor" SolidColorBrush
CellViewModel --> "TextAlignmentForView" TextAlignment
CellViewModel --> "TextDecorationsForView" TextDecorationCollection
CellViewModel --> "VerticalAlignmentForView" VerticalAlignment
CellViewModel --> "VerticalAlignmentForViewCenter" VerticalAlignment
@enduml
