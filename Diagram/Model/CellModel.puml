@startuml
class CellModel {
    - borderThickness : string = "1"
    - column : int
    - contentBorderThickness : string = "1"
    - errorText : string
    - font : string = "Consolas"
    - fontSize : double = 10
    - height : double
    - id : string
    - index : int = 0
    - isFontBold : bool = false
    - isFontItalic : bool = false
    - isFontStrikethrough : bool = false
    - margin : string = "0"
    - mergedWith : string
    - populateFunctionName : string
    - row : int
    - sheetName : string
    - text : string
    - triggerFunctionName : string
    - width : double
    +  <<event>> AfterCellEdited : Action<CellModel>? 
    +  <<event>> CellTriggered : Action<CellModel, EditContext>? 
    + BorderThicknessString : string <<get>> <<set>>
    + Column : int <<get>> <<set>>
    + ContentBorderThicknessString : string <<get>> <<set>>
    + ErrorText : string <<get>> <<set>>
    + FontFamily : string <<get>> <<set>>
    + FontSize : double <<get>> <<set>>
    + Height : double <<get>> <<set>>
    + ID : string <<get>> <<set>>
    + Index : int <<get>> <<set>>
    + IsFontBold : bool <<get>> <<set>>
    + IsFontItalic : bool <<get>> <<set>>
    + IsFontStrikethrough : bool <<get>> <<set>>
    + MarginString : string <<get>> <<set>>
    + MergedWith : string <<get>> <<set>>
    + PopulateFunctionName : string <<get>> <<set>>
    + Row : int <<get>> <<set>>
    + SelectedItem : string <<get>>
    + SheetName : string <<get>> <<set>>
    + Text : string <<get>> <<set>>
    + TriggerFunctionName : string <<get>> <<set>>
    + UserFriendlyCellName : string <<get>>
    + Value : double <<get>> <<set>>
    + Width : double <<get>> <<set>>
    + GetBooleanProperty(key:string) : bool
    + GetNumericProperty(key:string, defaultValue:double) : double
    + GetStringProperty(key:string) : string
    + PopulateText() : void
    + SetBackground(color:string) : void
    + SetBooleanProperty(key:string, value:bool) : void
    + SetBorder(color:string) : void
    + SetContentBackground(color:string) : void
    + SetContentBorder(color:string) : void
    + SetContentHighlight(color:string) : void
    + SetForeground(color:string) : void
    + SetItems(objects:IEnumerable<object>) : void
    + SetItems(commaSeperatedItems:string) : void
    + SetNumericProperty(key:string, value:double) : void
    + SetStringProperty(key:string, value:string) : void
    + <<override>> ToString() : string
    + TriggerCellEdited(editContext:EditContext) : void
    + UpdateDependencySubscriptions(function:FunctionViewModel) : void
}
class "Dictionary`2"<T1,T2> {
}
PropertyChangedBase <|-- CellModel
CellModel o-> "Empty" CellModel
CellModel o-> "cellType" CellType
CellModel o-> "horizontalAlignment" HorizontalAlignment
CellModel o-> "textAlignment" TextAlignment
CellModel o-> "verticalAlignment" VerticalAlignment
CellModel o-> "BooleanProperties<string,bool>" "Dictionary`2"
CellModel --> "CellType" CellType
CellModel --> "Date" DateTime
CellModel --> "HorizontalAlignment" HorizontalAlignment
CellModel o-> "NumericProperties<string,double>" "Dictionary`2"
CellModel o-> "StringProperties<string,string>" "Dictionary`2"
CellModel --> "TextAlignmentForView" TextAlignment
CellModel --> "VerticalAlignment" VerticalAlignment
@enduml
