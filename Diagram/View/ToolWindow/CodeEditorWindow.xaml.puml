@startuml
class CodeEditorWindow <<partial>> {
    - <<readonly>> _currentCell : CellModel?
    - <<readonly>> _doesFunctionReturnValue : bool
    - {static} _haveAssembliesBeenRegistered : bool
    - completionWindow : CompletionWindow?
    - _isDirty : bool
    - _isAllowingCloseWhileDirty : bool = false
    + CodeEditorWindow(function:FunctionViewModel, callback:Action<string>, currentCell:CellModel?)
    - OnTextChanged(sender:object?, e:EventArgs) : void
    +  <<event>> PropertyChanged : PropertyChangedEventHandler? 
    + ResultColumnWidth : double <<get>>
    + IsTransformedSyntaxTreeViewerVisible : bool <<get>> <<set>>
    + ResultString : string? <<get>> <<set>>
    + UserSetHeight : double <<get>> <<set>>
    + UserSetWidth : double <<get>> <<set>>
    + GetHeight() : double
    + GetTitle() : string
    + GetToolBarCommands() : List<CommandViewModel>
    - SaveAndClose() : void
    + GetWidth() : double
    + HandleBeingClosed() : bool
    - SaveCode() : void
    + SetHeight(height:double) : void
    + SetWidth(width:double) : void
    - {static} GetVariableTypePriorToCarot(textArea:TextArea) : string
    - DisplayResult(result:CompileResult) : void
    - NotifyDockPropertiesChanged() : void
    - OnTextEntered(sender:object, e:TextCompositionEventArgs) : void
    - OnTextEntering(sender:object, e:TextCompositionEventArgs) : void
    - TestCode() : void
    - ToggleSyntaxTreePreview() : void
}
class "Action`1"<T> {
}
UserControl <|-- CodeEditorWindow
INotifyPropertyChanged <|-- CodeEditorWindow
IResizableToolWindow <|-- CodeEditorWindow
CodeEditorWindow --> "_function" FunctionViewModel
CodeEditorWindow o-> "saveCodeCallback<string>" "Action`1"
CodeEditorWindow --> "_lastCompileResult" CompileResult
CodeEditorWindow --> "RequestClose" Action
CodeEditorWindow --> "ResultStringColor" SolidColorBrush
@enduml
