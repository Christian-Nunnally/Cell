@startuml
class PanAndZoomCanvas <<partial>> {
    + PanAndZoomCanvas()
    + CurrentZoom : double <<get>> <<set>> = 1.0
    + IsPanningEnabled : bool <<get>> <<set>> = true
    + XPan : double <<get>>
    + YPan : double <<get>>
    + Zoomfactor : double <<get>> <<set>> = 1.1
    + PanCanvasTo(x:double, y:double) : void
    + ZoomCanvasTo(centerOfZoom:Point, zoom:double) : void
    # <<override>> OnVisualChildrenChanged(visualAdded:DependencyObject, visualRemoved:DependencyObject) : void
    - ArrangeItemsForPanAndZoom() : void
    - OnCellViewModelPropertyChanged(sender:object?, e:System.ComponentModel.PropertyChangedEventArgs) : void
    - PanAndZoomCanvas_MouseDown(sender:object, e:MouseButtonEventArgs) : void
    - PanAndZoomCanvas_MouseMove(sender:object, e:MouseEventArgs) : void
    - PanAndZoomCanvas_MouseUp(sender:object, e:MouseButtonEventArgs) : void
    - PanAndZoomCanvas_MouseWheel(sender:object, e:MouseWheelEventArgs) : void
    - ZoomCanvas(centerOfZoom:Point, scaleFactor:double) : void
}
class "Dictionary`2"<T1,T2> {
}
Canvas <|-- PanAndZoomCanvas
PanAndZoomCanvas o-> "_viewModelToViewMap<CellViewModel,FrameworkElement>" "Dictionary`2"
PanAndZoomCanvas --> "_initialMousePosition" Point
PanAndZoomCanvas o-> "_transform" MatrixTransform
@enduml
