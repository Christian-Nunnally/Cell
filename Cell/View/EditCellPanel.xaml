<UserControl x:Class="Cell.View.EditCellPanel"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
             xmlns:xctk="http://schemas.xceed.com/wpf/xaml/toolkit"
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
             xmlns:local="clr-namespace:Cell.View"
             xmlns:converters="clr-namespace:Cell.View.Converters"
             mc:Ignorable="d" 
             xmlns:viewModel="clr-namespace:Cell.ViewModel" 
             xmlns:sys="clr-namespace:System;assembly=mscorlib"
             d:DataContext="{d:DesignInstance Type=viewModel:CellViewModel}"
             d:DesignHeight="450" d:DesignWidth="800">
    <UserControl.Resources>
        <BooleanToVisibilityConverter x:Key="BooleanToVisibilityConverter" />
        <xctk:InverseBoolConverter x:Key="InverseBoolConverter" />
        <xctk:ColorToSolidColorBrushConverter x:Key="ColorToSolidColorBrushConverter" />
        <xctk:AdditionConverter x:Key="AdditionConverter" />
        <xctk:ColorModeToTabItemSelectedConverter x:Key="ColorModeToTabItemSelectedConverter" />
        <converters:EnumToStringConverter x:Key="EnumToStringConverter" />
        <converters:RGBHexColorConverter x:Key="HexToColorConverter" />

        <ControlTemplate x:Key="TabItemTemplate" TargetType="{x:Type xctk:ColorPickerTabItem}">
            <Grid x:Name="templateRoot" SnapsToDevicePixels="true">
                <Border 
                    x:Name="mainBorder"
                    BorderBrush="{TemplateBinding BorderBrush}"
                    BorderThickness="1,1,1,0"
                    Background="{TemplateBinding Background}"
                    Margin="0">
                    <Border 
                        x:Name="innerBorder"
                        BorderBrush="#ACACAC"
                        BorderThickness="1,1,1,0"
                        Background="{TemplateBinding Background}"
                        Margin="-1"
                        Opacity="0" />
                </Border>
                <ContentPresenter 
                    x:Name="contentPresenter"
                    ContentSource="Header"
                    Focusable="False"
                    HorizontalAlignment="{Binding HorizontalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"
                    Margin="{TemplateBinding Padding}"
                    RecognizesAccessKey="True"
                    SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                    VerticalAlignment="{Binding VerticalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}" />
            </Grid>
            <ControlTemplate.Triggers>
                <MultiDataTrigger>
                    <MultiDataTrigger.Conditions>
                        <Condition Binding="{Binding IsSelected, RelativeSource={RelativeSource Self}}" Value="true" />
                    </MultiDataTrigger.Conditions>
                    <Setter Property="Panel.ZIndex" Value="1" />
                    <Setter Property="Margin" Value="-2,-2,-2,0" />
                    <Setter Property="Opacity" TargetName="innerBorder" Value="1" />
                </MultiDataTrigger>
            </ControlTemplate.Triggers>
        </ControlTemplate>

        <Style x:Key="ColorItemContainerStyle" TargetType="{x:Type ListBoxItem}">
            <Setter Property="ToolTip" Value="{Binding Name}" />
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type ListBoxItem}">
                        <Grid x:Name="mainGrid" ToolTip="{Binding Name}">
                            <Grid.Resources>
                                <Style TargetType="ToolTip">
                                    <Style.Triggers>
                                        <Trigger Property="Content" Value="{x:Static sys:String.Empty}">
                                            <Setter Property="Visibility" Value="Collapsed" />
                                        </Trigger>
                                    </Style.Triggers>
                                </Style>
                            </Grid.Resources>
                            <ContentPresenter HorizontalAlignment="Center"
                              VerticalAlignment="Center" />
                            <Border 
                                BorderThickness="1"
                                Background="Transparent"
                                BorderBrush="Transparent"
                                x:Name="_outerBorder"
                                HorizontalAlignment="Stretch"
                                VerticalAlignment="Stretch">
                                <Border 
                                    Background="Transparent"
                                    BorderThickness="1"
                                    BorderBrush="Transparent"
                                    x:Name="_innerBorder"
                                    HorizontalAlignment="Stretch"
                                    VerticalAlignment="Stretch" />
                            </Border>
                        </Grid>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsMouseOver" Value="True">
                                <Setter TargetName="_outerBorder" Property="BorderBrush" Value="#FFFF0000" />
                                <Setter TargetName="_innerBorder" Property="BorderBrush" Value="#FFFFFF00" />
                            </Trigger>
                            <Trigger Property="IsSelected" Value="True">
                                <Setter TargetName="_outerBorder" Property="BorderBrush" Value="#FFFF0000" />
                                <Setter TargetName="_innerBorder" Property="BorderBrush" Value="#FFFFFF00" />
                            </Trigger>
                            <DataTrigger Binding="{Binding DisplayColorTooltip, RelativeSource={RelativeSource AncestorType={x:Type xctk:ColorPicker}}}" Value="False">
                                <Setter Property="ToolTip" Value="{x:Static sys:String.Empty}" TargetName="mainGrid" />
                            </DataTrigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <DataTemplate x:Key="ColorItemTemplate">
            <Grid>
                <Border 
                    Background="{StaticResource CellBackground}"
                    BorderBrush="Black"
                    BorderThickness="1"
                    Margin="2,2,2,2">
                    <Rectangle Width="14" Height="14">
                        <Rectangle.Style>
                            <Style TargetType="Rectangle">
                                <Setter Property="Fill" Value="{Binding Color, Converter={StaticResource ColorToSolidColorBrushConverter}}" />
                            </Style>
                        </Rectangle.Style>
                    </Rectangle>
                </Border>
            </Grid>
        </DataTemplate>

        <Style x:Key="ColorListStyle"
         TargetType="ListBox">
            <Setter Property="Background"
            Value="Transparent" />
            <Setter Property="BorderThickness"
            Value="0" />
            <Setter Property="MaxHeight"
            Value="275" />
            <!-- ConverterParameter is margin/Padding from Popup-->
            <Setter Property="Width"
            Value="{Binding MaxDropDownWidth, RelativeSource={RelativeSource AncestorType={x:Type xctk:ColorPicker}}, Converter={StaticResource AdditionConverter}, ConverterParameter=-18}" />
            <Setter Property="ItemsPanel">
                <Setter.Value>
                    <ItemsPanelTemplate>
                        <WrapPanel Width="{Binding ActualWidth, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=ListBox}, Converter={StaticResource AdditionConverter}, ConverterParameter=-4}" />
                    </ItemsPanelTemplate>
                </Setter.Value>
            </Setter>
            <Setter Property="ItemContainerStyle"
            Value="{StaticResource ColorItemContainerStyle}" />
            <Setter Property="ItemTemplate"
            Value="{StaticResource ColorItemTemplate}" />
            <Setter Property="SelectionMode"
            Value="Single" />
        </Style>

        <Style TargetType="ToggleButton" x:Key="ColorPickerToggleButtonStyle">
            <Setter Property="HorizontalAlignment" Value="Stretch"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type ToggleButton}">
                        <Border>
                            <ContentPresenter HorizontalAlignment="Stretch" VerticalAlignment="Stretch"/>
                            <Border.Style>
                                <Style TargetType="Border">
                                    <Setter Property="BorderThickness" Value="1"/>
                                    <Setter Property="BorderBrush" Value="{StaticResource CellBorderColor}"/>
                                    <Setter Property="Background" Value="{StaticResource CellBackground}"/>
                                    <Setter Property="BorderThickness" Value="1"/>
                                    <Style.Triggers>
                                        <Trigger Property="IsMouseOver" Value="True">
                                            <Setter Property="Background" Value="{StaticResource SelectedColor}"/>
                                        </Trigger>
                                    </Style.Triggers>
                                </Style>
                            </Border.Style>
                        </Border>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
            <Style.Triggers>
                <Trigger Property="IsMouseOver" Value="True">
                    <Setter Property="Background" Value="{StaticResource SelectedColor}"/>
                </Trigger>
                <Trigger Property="IsChecked" Value="True">
                    <Setter Property="Background" Value="{StaticResource SelectedColor}"/>
                </Trigger>
            </Style.Triggers>
        </Style>

        <Style TargetType="{x:Type xctk:ColorPicker}">
            <Setter Property="Background" Value="{StaticResource CellBackground}" />
            <Setter Property="HeaderBackground" Value="{StaticResource CellBackground}" />
            <Setter Property="DropDownBackground" Value="{StaticResource CellBackground}"/>
            <Setter Property="TabBackground" Value="{StaticResource CellBackground}" />
            <Setter Property="BorderBrush" Value="{StaticResource CellBorderColor}" />
            <Setter Property="DropDownBorderBrush" Value="{StaticResource CellBorderColor}" />
            <Setter Property="IsTabStop" Value="False" />
            <Setter Property="HorizontalContentAlignment" Value="Stretch" />
            <Setter Property="VerticalContentAlignment" Value="Stretch" />
            <Setter Property="MaxDropDownWidth" Value="250" />
            <Setter Property="DropDownBorderThickness" Value="1" />
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type xctk:ColorPicker}">
                        <Grid>
                            <ToggleButton x:Name="PART_ColorPickerToggleButton"
                                IsTabStop="True"
                                MinHeight="22"
                                          Padding="0"
                                Background="{StaticResource CellBackground}"
                                BorderBrush="{StaticResource CellBorderColor}"
                                BorderThickness="0"
                                VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"
                                HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
                                IsChecked="{Binding IsOpen, RelativeSource={RelativeSource TemplatedParent}, Mode=TwoWay}"
                                IsHitTestVisible="{Binding IsOpen, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource InverseBoolConverter}}"
                                Style="{TemplateBinding ButtonStyle}">
                                <Border BorderBrush="{StaticResource CellBorderColor}" BorderThickness="1">
                                    <Rectangle Margin="5" Fill="{Binding SelectedColor, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=xctk:ColorPicker}, Converter={StaticResource ColorToSolidColorBrushConverter}}" />
                                </Border>
                            </ToggleButton>

                            <Popup x:Name="PART_ColorPickerPalettePopup"
                                VerticalAlignment="Bottom"
                                IsOpen="{Binding ElementName=PART_ColorPickerToggleButton, Path=IsChecked}"
                                StaysOpen="False"
                                AllowsTransparency="True"
                                Focusable="False"
                                HorizontalOffset="1"
                                VerticalOffset="1"
                                PopupAnimation="Slide"
                                ToolTip="{x:Static sys:String.Empty}"
                                Width="{TemplateBinding MaxDropDownWidth}">
                                <Popup.Resources>
                                    <Style TargetType="ToolTip">
                                        <Style.Triggers>
                                            <Trigger Property="Content" Value="{x:Static sys:String.Empty}">
                                                <Setter Property="Visibility" Value="Collapsed" />
                                            </Trigger>
                                        </Style.Triggers>
                                    </Style>
                                </Popup.Resources>
                                <Border BorderThickness="{TemplateBinding DropDownBorderThickness}"
                                    Background="{TemplateBinding DropDownBackground}"
                                    BorderBrush="{TemplateBinding DropDownBorderBrush}"
                                    Padding="3">
                                    <TabControl x:Name="ColorPickerTabControl"
                                        Background="Transparent"
                                        SelectedIndex="{Binding ColorMode, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource ColorModeToTabItemSelectedConverter}}">
                                        <xctk:ColorPickerTabItem x:Name="StandardTabItem"
                                            Header="{Binding StandardTabHeader, RelativeSource={RelativeSource TemplatedParent}}"
                                            Background="{TemplateBinding TabBackground}"
                                            Foreground="{TemplateBinding TabForeground}"
                                            Template="{StaticResource TabItemTemplate}">
                                            <Grid x:Name="_colorPaletteHost"
                                                Margin="4">
                                                <Grid.RowDefinitions>
                                                    <RowDefinition Height="Auto" />
                                                    <RowDefinition Height="Auto" />
                                                    <RowDefinition Height="Auto" />
                                                    <RowDefinition Height="Auto" />
                                                </Grid.RowDefinitions>

                                                <!-- Available Colors -->
                                                <Grid Grid.Row="1"
                                                    Visibility="{TemplateBinding ShowAvailableColors, Converter={StaticResource BooleanToVisibilityConverter}}">
                                                    <Grid>
                                                        <Grid.RowDefinitions>
                                                            <RowDefinition Height="Auto" />
                                                            <RowDefinition />
                                                        </Grid.RowDefinitions>
                                                        <TextBlock Text="{TemplateBinding AvailableColorsHeader}"
                                                            Background="{TemplateBinding HeaderBackground}"
                                                            Foreground="{TemplateBinding HeaderForeground}"
                                                            Padding="2"
                                                            Margin="0,0,0,1" >
                                                        </TextBlock>
                                                        <ListBox x:Name="PART_AvailableColors"
                                                            Grid.Row="1"
                                                            ItemsSource="{Binding AvailableColors, RelativeSource={RelativeSource TemplatedParent}}"
                                                            Style="{StaticResource ColorListStyle}" >
                                                        </ListBox>
                                                    </Grid>
                                                </Grid>

                                                <!-- Standard Colors-->
                                                <Grid Grid.Row="2"
                                                    Visibility="{TemplateBinding ShowStandardColors, Converter={StaticResource BooleanToVisibilityConverter}}">
                                                    <Grid>
                                                        <Grid.RowDefinitions>
                                                            <RowDefinition Height="Auto" />
                                                            <RowDefinition Height="Auto" />
                                                        </Grid.RowDefinitions>
                                                        <TextBlock Text="{TemplateBinding StandardColorsHeader}"
                                                            Background="{TemplateBinding HeaderBackground}"
                                                            Foreground="{TemplateBinding HeaderForeground}"
                                                            Padding="2"
                                                            Margin="0,1,0,1" >
                                                        </TextBlock>
                                                        <ListBox x:Name="PART_StandardColors"
                                                            Grid.Row="1"
                                                            ItemsSource="{Binding StandardColors, RelativeSource={RelativeSource TemplatedParent}}"
                                                            Style="{StaticResource ColorListStyle}" >
                                                        </ListBox>
                                                    </Grid>
                                                </Grid>

                                                <!-- Recent Colors-->
                                                <Grid Grid.Row="3"
                                                    Margin="0,1,0,1"
                                                    Visibility="{TemplateBinding ShowRecentColors, Converter={StaticResource BooleanToVisibilityConverter}}">
                                                    <Grid>
                                                        <Grid.RowDefinitions>
                                                            <RowDefinition Height="Auto" />
                                                            <RowDefinition Height="22" />
                                                        </Grid.RowDefinitions>
                                                        <TextBlock Text="{TemplateBinding RecentColorsHeader}"
                                                            Background="{TemplateBinding HeaderBackground}"
                                                            Foreground="{TemplateBinding HeaderForeground}"
                                                            Padding="2"
                                                            Margin="0,1,0,1" >
                                                        </TextBlock>
                                                        <ListBox x:Name="PART_RecentColors"
                                                            Grid.Row="1"
                                                            ItemsSource="{Binding RecentColors, RelativeSource={RelativeSource TemplatedParent}}"
                                                            Style="{StaticResource ColorListStyle}" >
                                                        </ListBox>
                                                    </Grid>
                                                </Grid>
                                            </Grid>
                                        </xctk:ColorPickerTabItem>
                                        <xctk:ColorPickerTabItem 
                                            x:Name="AdvancedTabItem"
                                            Header="{Binding AdvancedTabHeader, RelativeSource={RelativeSource TemplatedParent}}"
                                            Background="{TemplateBinding TabBackground}"
                                            Foreground="{TemplateBinding TabForeground}"
                                            Template="{StaticResource TabItemTemplate}">
                                            <!-- ColorCanvas -->
                                            <!-- ConverterParameter is margin/Padding from Popup-->
                                            <Grid x:Name="_colorCanvasHost" Width="{Binding MaxDropDownWidth, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource AdditionConverter}, ConverterParameter=-18}">
                                                <ScrollViewer HorizontalScrollBarVisibility="Auto" VerticalScrollBarVisibility="Hidden">
                                                    <xctk:ColorCanvas Background="Transparent"
                                                        BorderThickness="0"
                                                        Foreground="{Binding Foreground, RelativeSource={RelativeSource TemplatedParent}}"
                                                        UsingAlphaChannel="{Binding UsingAlphaChannel, RelativeSource={RelativeSource TemplatedParent}}"
                                                        SelectedColor="{Binding SelectedColor, RelativeSource={RelativeSource TemplatedParent}}" />
                                                </ScrollViewer>
                                            </Grid>
                                        </xctk:ColorPickerTabItem>
                                    </TabControl>
                                </Border>
                            </Popup>
                        </Grid>
                        <ControlTemplate.Triggers>
                            <Trigger Property="ShowTabHeaders" Value="False">
                                <Setter Property="Visibility" Value="Collapsed" TargetName="StandardTabItem" />
                                <Setter Property="Visibility" Value="Collapsed" TargetName="AdvancedTabItem" />
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
    </UserControl.Resources>
    <ContentControl Content="{Binding}">
        <ContentControl.Resources>
            <DataTemplate DataType="{x:Type viewModel:RowCellViewModel}">
                <StackPanel>
                    <StackPanel Orientation="Horizontal">
                        <Label Content="Height" Width="100"/>
                        <TextBox Text="{Binding Path=Height, UpdateSourceTrigger=LostFocus}" Width="100" KeyDown="TextBoxKeyDown"/>
                    </StackPanel>
                    <Button Content="Insert Row Above" Click="CreateNewRowAboveButtonClicked"/>
                    <Button Content="Insert Row Below" Click="CreateNewRowBelowButtonClicked"/>
                    <Button Content="Delete Row" Click="DeleteRowButtonClicked"/>
                </StackPanel>
            </DataTemplate>
            <DataTemplate DataType="{x:Type viewModel:ColumnCellViewModel}">
                <StackPanel>
                    <StackPanel Orientation="Horizontal">
                        <Label Content="Width" Width="100"/>
                        <TextBox Text="{Binding Path=Width, UpdateSourceTrigger=LostFocus}" Width="100" KeyDown="TextBoxKeyDown"/>
                    </StackPanel>
                    <Button Content="Insert Column to Left" Click="CreateNewColumnToTheLeftButtonClicked"/>
                    <Button Content="Insert Column to Right" Click="CreateNewColumnToTheRightButtonClicked"/>
                    <Button Content="Delete Column" Click="DeleteColumnButtonClicked"/>
                </StackPanel>
            </DataTemplate>
            <DataTemplate DataType="{x:Type viewModel:CellViewModel}">
                <StackPanel>
                    <StackPanel Orientation="Horizontal">
                        <Label Width="50" Content="Color"/>
                        <xctk:ColorPicker 
                            SelectedColor="{Binding ForegroundColorHex, Converter={StaticResource HexToColorConverter}}"
                            Width="75"
                            HeaderBackground="{StaticResource CellBackground}"
                            TabBackground="{StaticResource CellBackground}"
                            Background="AliceBlue"
                            DropDownBorderBrush="{StaticResource CellBorderColor}"
                            BorderBrush="{StaticResource CellBorderColor}"
                            ShowDropDownButton="False"
                            ShowTabHeaders="True"
                            UsingAlphaChannel="False"
                            AvailableColorsSortingMode="HueSaturationBrightness"
                            Foreground="{StaticResource ForegroundColor}"
                            HeaderForeground="{StaticResource ForegroundColor}"
                            TabForeground="{StaticResource ForegroundColor}"
                            ButtonStyle="{StaticResource ColorPickerToggleButtonStyle}"/>
                        <xctk:ColorPicker 
                            SelectedColor="{Binding BackgroundColorHex, Converter={StaticResource HexToColorConverter}}"
                            Width="75"
                            DropDownBackground="{StaticResource CellBackground}"
                            HeaderBackground="{StaticResource CellBackground}"
                            TabBackground="{StaticResource CellBackground}"
                            Background="AliceBlue"
                            DropDownBorderBrush="{StaticResource CellBorderColor}"
                            BorderBrush="{StaticResource CellBorderColor}"
                            ShowDropDownButton="False"
                            ShowTabHeaders="True"
                            UsingAlphaChannel="False"
                            AvailableColorsSortingMode="HueSaturationBrightness"
                            Foreground="{StaticResource ForegroundColor}"
                            HeaderForeground="{StaticResource ForegroundColor}"
                            TabForeground="{StaticResource ForegroundColor}"
                            ButtonStyle="{StaticResource ColorPickerToggleButtonStyle}"/>
                    </StackPanel>
                    <StackPanel Orientation="Horizontal">
                        <Label Width="50" Content="Border"/>
                        <xctk:ColorPicker 
                            SelectedColor="{Binding BorderColorHex, Converter={StaticResource HexToColorConverter}}"
                            Width="75"
                            DropDownBackground="{StaticResource CellBackground}"
                            HeaderBackground="{StaticResource CellBackground}"
                            TabBackground="{StaticResource CellBackground}"
                            Background="AliceBlue"
                            DropDownBorderBrush="{StaticResource CellBorderColor}"
                            BorderBrush="{StaticResource CellBorderColor}"
                            ShowDropDownButton="False"
                            ShowTabHeaders="True"
                            UsingAlphaChannel="False"
                            AvailableColorsSortingMode="HueSaturationBrightness"
                            Foreground="{StaticResource ForegroundColor}"
                            HeaderForeground="{StaticResource ForegroundColor}"
                            TabForeground="{StaticResource ForegroundColor}"
                            ButtonStyle="{StaticResource ColorPickerToggleButtonStyle}"/>
                        <TextBox Text="{Binding Path=BorderThicknessString, UpdateSourceTrigger=LostFocus}" Width="50" KeyDown="TextBoxKeyDown"/>
                        <Grid>
                            <ToggleButton x:Name="TogglePopupButton" Content="⇆" FontSize="14" Width="25" >
                                <ToggleButton.Style>
                                    <Style TargetType="{x:Type ToggleButton}" BasedOn="{StaticResource {x:Type ToggleButton}}">
                                        <Setter Property="Background" Value="{StaticResource CellBackground}"/>
                                        <Setter Property="Foreground" Value="{StaticResource ForegroundColor}"/>
                                        <Setter Property="BorderBrush" Value="{StaticResource CellBorderColor}"/>
                                        <Setter Property="IsHitTestVisible" Value="True"/>
                                        <Setter Property="Template">
                                            <Setter.Value>
                                                <ControlTemplate TargetType="{x:Type ToggleButton}">
                                                    <Border 
                                                        Background="{TemplateBinding Background}"
                                                        BorderBrush="{StaticResource CellBorderColor}"
                                                        BorderThickness="1">
                                                        <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center"/>
                                                    </Border>
                                                </ControlTemplate>
                                            </Setter.Value>
                                        </Setter>
                                        <Style.Triggers>
                                            <Trigger Property="IsMouseOver" Value="True">
                                                <Setter Property="Background" Value="{StaticResource SelectedColor}"/>
                                            </Trigger>
                                            <Trigger Property="IsChecked" Value="True">
                                                <Setter Property="Background" Value="{StaticResource SelectedColor}"/>
                                            </Trigger>
                                            <DataTrigger Binding="{Binding ElementName=Popup, Path=IsOpen}" Value="True">
                                                <Setter Property="IsHitTestVisible" Value="False"/>
                                            </DataTrigger>
                                        </Style.Triggers>
                                    </Style>
                                </ToggleButton.Style>
                            </ToggleButton>

                            <Popup StaysOpen="False" IsOpen="{Binding IsChecked, ElementName=TogglePopupButton, Mode=TwoWay}"
                                   PlacementTarget="{Binding ElementName=TogglePopupButton}" PopupAnimation="Slide" 
                                        x:Name="Popup" Placement="Bottom">
                                <Border BorderThickness="4" BorderBrush="{StaticResource SelectedBorderColor}">
                                    <StackPanel>
                                        <StackPanel Orientation="Horizontal">
                                            <Button Content="↖" Width="20" Height="20" FontSize="14" Click="SetAlignmentToTopLeftButtonClick"/>
                                            <Button Content="↑" Width="20" Height="20" FontSize="14" Click="SetAlignmentToTopButtonClick"/>
                                            <Button Content="↗" Width="20" Height="20" FontSize="14" Click="SetAlignmentToTopRightButtonClick"/>
                                        </StackPanel>
                                        <StackPanel Orientation="Horizontal">
                                            <Button Content="←" Width="20" Height="20" FontSize="14" Click="SetAlignmentToLeftButtonClick"/>
                                            <Button Content="•" Width="20" Height="20" FontSize="14" Click="SetAlignmentToCenterButtonClick"/>
                                            <Button Content="→" Width="20" Height="20" FontSize="14" Click="SetAlignmentToRightButtonClick"/>
                                        </StackPanel>
                                        <StackPanel Orientation="Horizontal">
                                            <Button Content="↙" Width="20" Height="20" FontSize="14" Click="SetAlignmentToBottomLeftButtonClick"/>
                                            <Button Content="↓" Width="20" Height="20" FontSize="14" Click="SetAlignmentToBottomButtonClick"/>
                                            <Button Content="↘" Width="20" Height="20" FontSize="14" Click="SetAlignmentToBottomRightButtonClick"/>
                                        </StackPanel>
                                        <StackPanel Orientation="Horizontal">
                                            <Button Content="←" Width="20" Height="20" FontSize="14" Click="SetTextAlignmentToLeftButtonClick"/>
                                            <Button Content="•" Width="20" Height="20" FontSize="14" Click="SetTextAlignmentToCenterButtonClick"/>
                                            <Button Content="→" Width="20" Height="20" FontSize="14" Click="SetTextAlignmentToRightButtonClick"/>
                                        </StackPanel>
                                    </StackPanel>
                                </Border>
                            </Popup>
                        </Grid>
                    </StackPanel>
                    <StackPanel Orientation="Horizontal">
                        <Label Width="50" Content="Font"/>
                        <TextBox Text="{Binding Path=FontFamily, UpdateSourceTrigger=LostFocus}" Width="75" KeyDown="TextBoxKeyDown"/>
                        <TextBox Text="{Binding Path=FontSize, UpdateSourceTrigger=LostFocus}" Width="27" KeyDown="TextBoxKeyDown" HorizontalContentAlignment="Center"/>
                        <ToggleButton Content="b" FontWeight="Bold" Width="16" IsChecked="{Binding IsFontBold}" />
                        <ToggleButton Content="i" FontStyle="Italic" Width="16" IsChecked="{Binding IsFontItalic}"/>
                        <ToggleButton Width="16" IsChecked="{Binding IsFontStrikethrough}">
                            <TextBlock TextDecorations="Strikethrough" Text="s"/>
                        </ToggleButton>
                    </StackPanel>
                    <StackPanel Orientation="Horizontal">
                        <Label Content="Type" HorizontalAlignment="Center" Width="50"/>
                        <ComboBox Text="{Binding CellType, Mode=OneWay, Converter={StaticResource EnumToStringConverter}}" SelectionChanged="CellTypeComboBoxSelectionChanged" Width="150">
                            <Label Content="Label"/>
                            <Label Content="Textbox"/>
                            <Label Content="Checkbox"/>
                            <Label Content="Button"/>
                            <Label Content="Dropdown"/>
                            <Label Content="List"/>
                            <Label Content="Progress"/>
                            <Label Content="Graph"/>
                        </ComboBox>
                    </StackPanel>
                    <StackPanel Orientation="Horizontal">
                        <Button Content="Merge" Click="MergeButtonClicked" Width="100"/>
                        <Button Content="Unmerge" Click="UnmergeButtonClicked" Width="100"/>
                    </StackPanel>
                    <StackPanel Orientation="Horizontal">
                        <Label Content="Functions" Width="100"/>
                        <Button Content="Index" Click="IndexButtonClicked" Width="65"/>
                        <TextBox Text="{Binding Path=Index, UpdateSourceTrigger=LostFocus}" Width="35" HorizontalContentAlignment="Center" KeyDown="TextBoxKeyDown"/>
                    </StackPanel>
                    <StackPanel Orientation="Horizontal">
                        <Label Content="Populate" Width="65"/>
                        <TextBox Text="{Binding Path=PopulateFunctionName, UpdateSourceTrigger=LostFocus}" Width="100" KeyDown="TextBoxKeyDown"/>
                        <Button Content="Edit" Click="EditGetTextFunctionButtonClicked" Width="35"/>
                    </StackPanel>
                    <StackPanel Orientation="Horizontal">
                        <Label Content="Updated" Width="65"/>
                        <TextBox Text="{Binding Path=TriggerFunctionName, UpdateSourceTrigger=LostFocus}" Width="100" KeyDown="TextBoxKeyDown"/>
                        <Button Content="Edit" Click="EditOnEditFunctionButtonClicked" Width="35"/>
                    </StackPanel>
                </StackPanel>
            </DataTemplate>
            <DataTemplate DataType="{x:Type viewModel:CornerCellViewModel}">
                <StackPanel>
                    <Button Content="Create Backup" Click="CreateBackupButtonClicked"/>
                </StackPanel>
            </DataTemplate>
        </ContentControl.Resources>
    </ContentControl>
</UserControl>
