<view:ResizableToolWindow
    x:Class="Cell.View.ToolWindow.CellContentEditWindow"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:avalonEdit="http://icsharpcode.net/sharpdevelop/avalonedit"
    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
    xmlns:fa="http://schemas.awesome.incremented/wpf/xaml/fontawesome.sharp"
    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
    xmlns:view="clr-namespace:Cell.View.ToolWindow"
    xmlns:viewModel="clr-namespace:Cell.ViewModel.ToolWindow"
    d:DataContext="{d:DesignInstance Type=viewModel:CellContentEditWindowViewModel}"
    d:DesignHeight="30"
    d:DesignWidth="600"
    SnapsToDevicePixels="True"
    mc:Ignorable="d">
    <DockPanel>
        <Button
            Height="Auto"
            MinWidth="40"
            Click="AutoIndexButtonClicked"
            Content="Auto"
            DockPanel.Dock="Right"
            ToolTip="Opens the code editor for the populate function this cell is using." />
        <Button
            Height="Auto"
            MinWidth="40"
            Click="EditPopulateFunctionButtonClicked"
            Content="{fa:Icon Code}"
            ToolTip="Opens the code editor for the populate function this cell is using."
            Visibility="{Binding IsEditFunctionButtonVisible, Converter={StaticResource BooleanToVisibilityConverter}}" />
        <TextBox
            Width="35"
            HorizontalContentAlignment="Center"
            DockPanel.Dock="Right"
            PreviewKeyDown="TextBoxPreviewKeyDown"
            Text="{Binding Path=Index, UpdateSourceTrigger=LostFocus}"
            ToolTip="The 'index' of this cell. This number is read from functions using cell.Index and is used to uniquify the functions output for this cell." />
        <TextBox
            Height="Auto"
            MinWidth="100"
            Padding="5"
            DockPanel.Dock="Right"
            FontFamily="{StaticResource ProgrammingFont}"
            Text="{Binding TriggerFunctionNameTextboxText, UpdateSourceTrigger=LostFocus}" />
        <Button
            Height="Auto"
            MinWidth="40"
            Click="EditTriggerFunctionButtonClicked"
            Content="{fa:Icon Bolt}"
            DockPanel.Dock="Right"
            ToolTip="Opens the code editor for the populate function this cell is using." />
        <Grid>
            <avalonEdit:TextEditor
                Name="_multiUseUserInputTextBox"
                Grid.Row="1"
                Padding="3,6"
                Background="{StaticResource ControlBackground}"
                BorderBrush="{StaticResource CellBorderColor}"
                BorderThickness="1"
                FontSize="15"
                Foreground="{StaticResource ForegroundColor}"
                HorizontalScrollBarVisibility="Auto"
                LostFocus="MultiUseUserInputTextBoxLostFocus"
                PreviewKeyDown="TextBoxPreviewKeyDown"
                SyntaxHighlighting="C#"
                ToolTip="Sets a cells text. To compute the text using a function, type '=' and then the function name, like '=MyFunction'"
                VerticalScrollBarVisibility="Auto" />
            <Border
                BorderBrush="{StaticResource PendingColor}"
                BorderThickness="1"
                SnapsToDevicePixels="True"
                Visibility="{Binding ArePendingChangesInMultiEditTextBox, Converter={StaticResource BooleanToVisibilityConverter}}">
                <Label
                    Height="30"
                    Margin="5"
                    HorizontalAlignment="Right"
                    VerticalAlignment="Top"
                    Content="↩"
                    MouseDown="SubmitMultiEditTextLabelMouseDown"
                    ToolTip="Press `Enter` to apply changes to selected cells">
                    <Label.Style>
                        <Style TargetType="Label">
                            <Style.Triggers>
                                <!--  Trigger for mouse over event  -->
                                <Trigger Property="IsMouseOver" Value="True">
                                    <Setter Property="Foreground" Value="{StaticResource SelectedColor}" />
                                    <!--  Change color on hover  -->
                                </Trigger>
                                <!--  Optional: Change the foreground color back to original when mouse is not over  -->
                                <Trigger Property="IsMouseOver" Value="False">
                                    <Setter Property="Foreground" Value="{StaticResource PendingColor}" />
                                    <!--  Original color  -->
                                </Trigger>
                            </Style.Triggers>
                        </Style>
                    </Label.Style>
                </Label>
            </Border>
        </Grid>
    </DockPanel>
</view:ResizableToolWindow>
